-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    full_alpha : IN STD_LOGIC_VECTOR (16 downto 0);
    sin_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    sin_out_ap_vld : OUT STD_LOGIC;
    cos_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    cos_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic_cordic,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.891750,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=594,HLS_SYN_LUT=2545,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_6487 : STD_LOGIC_VECTOR (16 downto 0) := "00110010010000111";
    constant ap_const_lv17_C90F : STD_LOGIC_VECTOR (16 downto 0) := "01100100100001111";
    constant ap_const_lv17_19B79 : STD_LOGIC_VECTOR (16 downto 0) := "11001101101111001";
    constant ap_const_lv17_136F1 : STD_LOGIC_VECTOR (16 downto 0) := "10011011011110001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal alpha_V_2_fu_106_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal alpha_V_2_reg_150 : STD_LOGIC_VECTOR (16 downto 0);
    signal flag_V_fu_128_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flag_V_reg_155 : STD_LOGIC_VECTOR (1 downto 0);
    signal mycos_V_reg_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal flag_delay_V_fu_146_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal flag_delay_V_reg_165 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cordic_calculate_fu_62_ap_start : STD_LOGIC;
    signal grp_cordic_calculate_fu_62_ap_done : STD_LOGIC;
    signal grp_cordic_calculate_fu_62_ap_idle : STD_LOGIC;
    signal grp_cordic_calculate_fu_62_ap_ready : STD_LOGIC;
    signal grp_cordic_calculate_fu_62_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordic_calculate_fu_62_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordic_calculate_fu_62_ap_return_2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_cordic_calculate_fu_62_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_68_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln1495_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_V_1_fu_92_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1494_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_V_fu_80_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln24_fu_98_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln1494_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1494_1_fu_114_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cordic_cordic_calculate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        alpha : IN STD_LOGIC_VECTOR (16 downto 0);
        flag_delay_V_write : IN STD_LOGIC_VECTOR (1 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    grp_cordic_calculate_fu_62 : component cordic_cordic_calculate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cordic_calculate_fu_62_ap_start,
        ap_done => grp_cordic_calculate_fu_62_ap_done,
        ap_idle => grp_cordic_calculate_fu_62_ap_idle,
        ap_ready => grp_cordic_calculate_fu_62_ap_ready,
        alpha => alpha_V_2_reg_150,
        flag_delay_V_write => flag_V_reg_155,
        ap_return_0 => grp_cordic_calculate_fu_62_ap_return_0,
        ap_return_1 => grp_cordic_calculate_fu_62_ap_return_1,
        ap_return_2 => grp_cordic_calculate_fu_62_ap_return_2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cordic_calculate_fu_62_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cordic_calculate_fu_62_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_cordic_calculate_fu_62_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordic_calculate_fu_62_ap_ready = ap_const_logic_1)) then 
                    grp_cordic_calculate_fu_62_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                alpha_V_2_reg_150 <= alpha_V_2_fu_106_p3;
                flag_V_reg_155 <= flag_V_fu_128_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                flag_delay_V_reg_165 <= grp_cordic_calculate_fu_62_ap_return_2;
                mycos_V_reg_160 <= grp_cordic_calculate_fu_62_ap_return_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_cordic_calculate_fu_62_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_cordic_calculate_fu_62_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    alpha_V_1_fu_92_p2 <= std_logic_vector(signed(ap_const_lv17_136F1) - signed(full_alpha));
    alpha_V_2_fu_106_p3 <= 
        alpha_V_fu_80_p2 when (icmp_ln1494_fu_74_p2(0) = '1') else 
        select_ln24_fu_98_p3;
    alpha_V_fu_80_p2 <= std_logic_vector(unsigned(ap_const_lv17_C90F) - unsigned(full_alpha));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cos_out_assign_proc : process(ap_CS_fsm_state3, flag_delay_V_fu_146_p1, flag_delay_V_reg_165, grp_cordic_calculate_fu_62_ap_done, grp_cordic_calculate_fu_62_ap_return_1, grp_fu_68_p2, ap_CS_fsm_state4)
    begin
        if ((((flag_delay_V_reg_165 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((flag_delay_V_reg_165 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            cos_out <= grp_fu_68_p2;
        elsif ((not((flag_delay_V_fu_146_p1 = ap_const_lv2_3)) and not((flag_delay_V_fu_146_p1 = ap_const_lv2_2)) and (grp_cordic_calculate_fu_62_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cos_out <= grp_cordic_calculate_fu_62_ap_return_1;
        else 
            cos_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cos_out_ap_vld_assign_proc : process(ap_CS_fsm_state3, flag_delay_V_fu_146_p1, flag_delay_V_reg_165, grp_cordic_calculate_fu_62_ap_done, ap_CS_fsm_state4)
    begin
        if ((((flag_delay_V_reg_165 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((flag_delay_V_reg_165 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not((flag_delay_V_fu_146_p1 = ap_const_lv2_3)) and not((flag_delay_V_fu_146_p1 = ap_const_lv2_2)) and (grp_cordic_calculate_fu_62_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            cos_out_ap_vld <= ap_const_logic_1;
        else 
            cos_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    flag_V_fu_128_p3 <= 
        select_ln1494_1_fu_114_p3 when (or_ln1494_fu_122_p2(0) = '1') else 
        ap_const_lv2_0;
    flag_delay_V_fu_146_p1 <= grp_cordic_calculate_fu_62_ap_return_2;
    grp_cordic_calculate_fu_62_ap_start <= grp_cordic_calculate_fu_62_ap_start_reg;
    grp_fu_68_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(mycos_V_reg_160));
    icmp_ln1494_fu_74_p2 <= "1" when (signed(full_alpha) > signed(ap_const_lv17_6487)) else "0";
    icmp_ln1495_fu_86_p2 <= "1" when (signed(full_alpha) < signed(ap_const_lv17_19B79)) else "0";
    or_ln1494_fu_122_p2 <= (icmp_ln1495_fu_86_p2 or icmp_ln1494_fu_74_p2);
    select_ln1494_1_fu_114_p3 <= 
        ap_const_lv2_2 when (icmp_ln1494_fu_74_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln24_fu_98_p3 <= 
        alpha_V_1_fu_92_p2 when (icmp_ln1495_fu_86_p2(0) = '1') else 
        full_alpha;
    sin_out <= grp_cordic_calculate_fu_62_ap_return_0;

    sin_out_ap_vld_assign_proc : process(ap_CS_fsm_state3, grp_cordic_calculate_fu_62_ap_done)
    begin
        if (((grp_cordic_calculate_fu_62_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sin_out_ap_vld <= ap_const_logic_1;
        else 
            sin_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
