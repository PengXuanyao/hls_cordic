// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic_cordic,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.891750,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=594,HLS_SYN_LUT=2545,HLS_VERSION=2020_2}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        full_alpha,
        sin_out,
        sin_out_ap_vld,
        cos_out,
        cos_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] full_alpha;
output  [15:0] sin_out;
output   sin_out_ap_vld;
output  [15:0] cos_out;
output   cos_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sin_out_ap_vld;
reg[15:0] cos_out;
reg cos_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [16:0] alpha_V_2_fu_106_p3;
reg   [16:0] alpha_V_2_reg_150;
wire   [1:0] flag_V_fu_128_p3;
reg   [1:0] flag_V_reg_155;
reg   [15:0] mycos_V_reg_160;
wire    ap_CS_fsm_state3;
wire   [1:0] flag_delay_V_fu_146_p1;
reg   [1:0] flag_delay_V_reg_165;
wire    grp_cordic_calculate_fu_62_ap_start;
wire    grp_cordic_calculate_fu_62_ap_done;
wire    grp_cordic_calculate_fu_62_ap_idle;
wire    grp_cordic_calculate_fu_62_ap_ready;
wire   [15:0] grp_cordic_calculate_fu_62_ap_return_0;
wire   [15:0] grp_cordic_calculate_fu_62_ap_return_1;
wire   [1:0] grp_cordic_calculate_fu_62_ap_return_2;
reg    grp_cordic_calculate_fu_62_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [15:0] grp_fu_68_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln1495_fu_86_p2;
wire   [16:0] alpha_V_1_fu_92_p2;
wire   [0:0] icmp_ln1494_fu_74_p2;
wire   [16:0] alpha_V_fu_80_p2;
wire   [16:0] select_ln24_fu_98_p3;
wire   [0:0] or_ln1494_fu_122_p2;
wire   [1:0] select_ln1494_1_fu_114_p3;
reg   [3:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_cordic_calculate_fu_62_ap_start_reg = 1'b0;
end

cordic_cordic_calculate grp_cordic_calculate_fu_62(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cordic_calculate_fu_62_ap_start),
    .ap_done(grp_cordic_calculate_fu_62_ap_done),
    .ap_idle(grp_cordic_calculate_fu_62_ap_idle),
    .ap_ready(grp_cordic_calculate_fu_62_ap_ready),
    .alpha(alpha_V_2_reg_150),
    .flag_delay_V_write(flag_V_reg_155),
    .ap_return_0(grp_cordic_calculate_fu_62_ap_return_0),
    .ap_return_1(grp_cordic_calculate_fu_62_ap_return_1),
    .ap_return_2(grp_cordic_calculate_fu_62_ap_return_2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cordic_calculate_fu_62_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_cordic_calculate_fu_62_ap_start_reg <= 1'b1;
        end else if ((grp_cordic_calculate_fu_62_ap_ready == 1'b1)) begin
            grp_cordic_calculate_fu_62_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        alpha_V_2_reg_150 <= alpha_V_2_fu_106_p3;
        flag_V_reg_155 <= flag_V_fu_128_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        flag_delay_V_reg_165 <= grp_cordic_calculate_fu_62_ap_return_2;
        mycos_V_reg_160 <= grp_cordic_calculate_fu_62_ap_return_1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((flag_delay_V_reg_165 == 2'd2) & (1'b1 == ap_CS_fsm_state4)) | ((flag_delay_V_reg_165 == 2'd3) & (1'b1 == ap_CS_fsm_state4)))) begin
        cos_out = grp_fu_68_p2;
    end else if ((~(flag_delay_V_fu_146_p1 == 2'd3) & ~(flag_delay_V_fu_146_p1 == 2'd2) & (grp_cordic_calculate_fu_62_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        cos_out = grp_cordic_calculate_fu_62_ap_return_1;
    end else begin
        cos_out = 'bx;
    end
end

always @ (*) begin
    if ((((flag_delay_V_reg_165 == 2'd2) & (1'b1 == ap_CS_fsm_state4)) | ((flag_delay_V_reg_165 == 2'd3) & (1'b1 == ap_CS_fsm_state4)) | (~(flag_delay_V_fu_146_p1 == 2'd3) & ~(flag_delay_V_fu_146_p1 == 2'd2) & (grp_cordic_calculate_fu_62_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        cos_out_ap_vld = 1'b1;
    end else begin
        cos_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((grp_cordic_calculate_fu_62_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        sin_out_ap_vld = 1'b1;
    end else begin
        sin_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_cordic_calculate_fu_62_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign alpha_V_1_fu_92_p2 = ($signed(17'd79601) - $signed(full_alpha));

assign alpha_V_2_fu_106_p3 = ((icmp_ln1494_fu_74_p2[0:0] == 1'b1) ? alpha_V_fu_80_p2 : select_ln24_fu_98_p3);

assign alpha_V_fu_80_p2 = (17'd51471 - full_alpha);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign flag_V_fu_128_p3 = ((or_ln1494_fu_122_p2[0:0] == 1'b1) ? select_ln1494_1_fu_114_p3 : 2'd0);

assign flag_delay_V_fu_146_p1 = grp_cordic_calculate_fu_62_ap_return_2;

assign grp_cordic_calculate_fu_62_ap_start = grp_cordic_calculate_fu_62_ap_start_reg;

assign grp_fu_68_p2 = (16'd0 - mycos_V_reg_160);

assign icmp_ln1494_fu_74_p2 = (($signed(full_alpha) > $signed(17'd25735)) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_86_p2 = (($signed(full_alpha) < $signed(17'd105337)) ? 1'b1 : 1'b0);

assign or_ln1494_fu_122_p2 = (icmp_ln1495_fu_86_p2 | icmp_ln1494_fu_74_p2);

assign select_ln1494_1_fu_114_p3 = ((icmp_ln1494_fu_74_p2[0:0] == 1'b1) ? 2'd2 : 2'd3);

assign select_ln24_fu_98_p3 = ((icmp_ln1495_fu_86_p2[0:0] == 1'b1) ? alpha_V_1_fu_92_p2 : full_alpha);

assign sin_out = grp_cordic_calculate_fu_62_ap_return_0;

endmodule //cordic
