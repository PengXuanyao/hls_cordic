-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    full_alpha : IN STD_LOGIC_VECTOR (16 downto 0);
    sin_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    sin_out_ap_vld : OUT STD_LOGIC;
    cos_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    cos_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic_cordic,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.135988,HLS_SYN_LAT=19,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=222,HLS_SYN_LUT=645,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_26DD : STD_LOGIC_VECTOR (15 downto 0) := "0010011011011101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv17_6487 : STD_LOGIC_VECTOR (16 downto 0) := "00110010010000111";
    constant ap_const_lv17_C90F : STD_LOGIC_VECTOR (16 downto 0) := "01100100100001111";
    constant ap_const_lv17_19B79 : STD_LOGIC_VECTOR (16 downto 0) := "11001101101111001";
    constant ap_const_lv17_136F1 : STD_LOGIC_VECTOR (16 downto 0) := "10011011011110001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal myarctan_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal myarctan_ce0 : STD_LOGIC;
    signal myarctan_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_reg_222 : STD_LOGIC_VECTOR (4 downto 0);
    signal flag_V_fu_294_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal flag_V_reg_469 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln70_fu_318_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_reg_474 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln66_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_load9_reg_483 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_load6_reg_489 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_fu_349_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_reg_495 : STD_LOGIC_VECTOR (15 downto 0);
    signal xi_V_addr_2_reg_501 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_1_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal yi_V_addr_2_reg_512 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal xi_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal xi_V_ce0 : STD_LOGIC;
    signal xi_V_we0 : STD_LOGIC;
    signal xi_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal xi_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal yi_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal yi_V_ce0 : STD_LOGIC;
    signal yi_V_we0 : STD_LOGIC;
    signal yi_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal yi_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal flag_delay_a_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal flag_delay_a_V_ce0 : STD_LOGIC;
    signal flag_delay_a_V_we0 : STD_LOGIC;
    signal flag_delay_a_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal flag_delay_a_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_m_phi_fu_226_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln70_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_cast_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal alpha_V_3_fu_76 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_3_fu_393_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_2_fu_424_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal alpha_V_5_fu_272_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_fu_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_388_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_load9 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_4_fu_419_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_6_fu_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln703_2_fu_383_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_p_load6 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1_fu_414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1495_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_V_4_fu_258_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1494_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_V_fu_246_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln24_fu_264_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln1494_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1494_1_fu_280_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1333_fu_341_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1333_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_fu_379_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_142 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cordic_myarctan IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cordic_xi_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordic_flag_delay_a_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    myarctan_U : component cordic_myarctan
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => myarctan_address0,
        ce0 => myarctan_ce0,
        q0 => myarctan_q0);

    xi_V_U : component cordic_xi_V
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xi_V_address0,
        ce0 => xi_V_ce0,
        we0 => xi_V_we0,
        d0 => xi_V_d0,
        q0 => xi_V_q0);

    yi_V_U : component cordic_xi_V
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => yi_V_address0,
        ce0 => yi_V_ce0,
        we0 => yi_V_we0,
        d0 => yi_V_d0,
        q0 => yi_V_q0);

    flag_delay_a_V_U : component cordic_flag_delay_a_V
    generic map (
        DataWidth => 2,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flag_delay_a_V_address0,
        ce0 => flag_delay_a_V_ce0,
        we0 => flag_delay_a_V_we0,
        d0 => flag_delay_a_V_d0,
        q0 => flag_delay_a_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    alpha_V_3_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                alpha_V_3_fu_76 <= alpha_V_5_fu_272_p3;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1))) then 
                alpha_V_3_fu_76 <= add_ln703_2_fu_424_p2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0))) then 
                alpha_V_3_fu_76 <= sub_ln703_3_fu_393_p2;
            end if; 
        end if;
    end process;

    empty_6_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_6_fu_84 <= ap_const_lv16_26DD;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1))) then 
                empty_6_fu_84 <= add_ln703_1_fu_414_p2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0))) then 
                empty_6_fu_84 <= sub_ln703_2_fu_383_p2;
            end if; 
        end if;
    end process;

    empty_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                empty_fu_80 <= ap_const_lv16_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1))) then 
                empty_fu_80 <= sub_ln703_4_fu_419_p2;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0))) then 
                empty_fu_80 <= add_ln703_fu_388_p2;
            end if; 
        end if;
    end process;

    m_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_reg_222 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln66_reg_479 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                m_reg_222 <= add_ln70_reg_474;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln70_reg_474 <= add_ln70_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                flag_V_reg_469 <= flag_V_fu_294_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln66_reg_479 <= icmp_ln66_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_324_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_load6_reg_489 <= ap_sig_allocacmp_p_load6;
                p_load9_reg_483 <= ap_sig_allocacmp_p_load9;
                r_1_reg_506 <= r_1_fu_362_p2;
                r_reg_495 <= r_fu_349_p2;
                xi_V_addr_2_reg_501 <= zext_ln70_fu_355_p1(4 - 1 downto 0);
                yi_V_addr_2_reg_512 <= zext_ln70_fu_355_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln66_fu_324_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln66_fu_324_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln66_fu_324_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln703_1_fu_414_p2 <= std_logic_vector(unsigned(r_reg_495) + unsigned(p_load6_reg_489));
    add_ln703_2_fu_424_p2 <= std_logic_vector(unsigned(zext_ln68_fu_379_p1) + unsigned(alpha_V_3_fu_76));
    add_ln703_fu_388_p2 <= std_logic_vector(unsigned(r_1_reg_506) + unsigned(p_load9_reg_483));
    add_ln70_fu_318_p2 <= std_logic_vector(unsigned(ap_phi_mux_m_phi_fu_226_p4) + unsigned(ap_const_lv5_1));
    alpha_V_4_fu_258_p2 <= std_logic_vector(signed(ap_const_lv17_136F1) - signed(full_alpha));
    alpha_V_5_fu_272_p3 <= 
        alpha_V_fu_246_p2 when (icmp_ln1494_fu_240_p2(0) = '1') else 
        select_ln24_fu_264_p3;
    alpha_V_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv17_C90F) - unsigned(full_alpha));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_142_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_142 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln66_fu_324_p2)
    begin
        if ((icmp_ln66_fu_324_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_m_phi_fu_226_p4_assign_proc : process(m_reg_222, add_ln70_reg_474, ap_CS_fsm_pp0_stage0, icmp_ln66_reg_479, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln66_reg_479 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_m_phi_fu_226_p4 <= add_ln70_reg_474;
        else 
            ap_phi_mux_m_phi_fu_226_p4 <= m_reg_222;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_load6_assign_proc : process(tmp_fu_371_p3, empty_6_fu_84, sub_ln703_2_fu_383_p2, add_ln703_1_fu_414_p2, ap_condition_142)
    begin
        if ((ap_const_boolean_1 = ap_condition_142)) then
            if ((tmp_fu_371_p3 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_p_load6 <= add_ln703_1_fu_414_p2;
            elsif ((tmp_fu_371_p3 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_p_load6 <= sub_ln703_2_fu_383_p2;
            else 
                ap_sig_allocacmp_p_load6 <= empty_6_fu_84;
            end if;
        else 
            ap_sig_allocacmp_p_load6 <= empty_6_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_p_load9_assign_proc : process(tmp_fu_371_p3, empty_fu_80, add_ln703_fu_388_p2, sub_ln703_4_fu_419_p2, ap_condition_142)
    begin
        if ((ap_const_boolean_1 = ap_condition_142)) then
            if ((tmp_fu_371_p3 = ap_const_lv1_1)) then 
                ap_sig_allocacmp_p_load9 <= sub_ln703_4_fu_419_p2;
            elsif ((tmp_fu_371_p3 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_p_load9 <= add_ln703_fu_388_p2;
            else 
                ap_sig_allocacmp_p_load9 <= empty_fu_80;
            end if;
        else 
            ap_sig_allocacmp_p_load9 <= empty_fu_80;
        end if; 
    end process;


    cos_out_assign_proc : process(xi_V_q0, flag_delay_a_V_q0, ap_CS_fsm_state5, grp_fu_233_p2)
    begin
        if ((not((flag_delay_a_V_q0 = ap_const_lv2_2)) and not((flag_delay_a_V_q0 = ap_const_lv2_3)) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cos_out <= xi_V_q0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state5) and (flag_delay_a_V_q0 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (flag_delay_a_V_q0 = ap_const_lv2_3)))) then 
            cos_out <= grp_fu_233_p2;
        else 
            cos_out <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cos_out_ap_vld_assign_proc : process(flag_delay_a_V_q0, ap_CS_fsm_state5)
    begin
        if (((not((flag_delay_a_V_q0 = ap_const_lv2_2)) and not((flag_delay_a_V_q0 = ap_const_lv2_3)) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (flag_delay_a_V_q0 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (flag_delay_a_V_q0 = ap_const_lv2_3)))) then 
            cos_out_ap_vld <= ap_const_logic_1;
        else 
            cos_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    flag_V_fu_294_p3 <= 
        select_ln1494_1_fu_280_p3 when (or_ln1494_fu_288_p2(0) = '1') else 
        ap_const_lv2_0;

    flag_delay_a_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state4, ap_block_pp0_stage0, zext_ln70_fu_355_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            flag_delay_a_V_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flag_delay_a_V_address0 <= zext_ln70_fu_355_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            flag_delay_a_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            flag_delay_a_V_address0 <= "XXXX";
        end if; 
    end process;


    flag_delay_a_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            flag_delay_a_V_ce0 <= ap_const_logic_1;
        else 
            flag_delay_a_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flag_delay_a_V_d0_assign_proc : process(ap_CS_fsm_state1, flag_V_fu_294_p3, flag_V_reg_469, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flag_delay_a_V_d0 <= flag_V_reg_469;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            flag_delay_a_V_d0 <= flag_V_fu_294_p3;
        else 
            flag_delay_a_V_d0 <= "XX";
        end if; 
    end process;


    flag_delay_a_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001, icmp_ln66_fu_324_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln66_fu_324_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            flag_delay_a_V_we0 <= ap_const_logic_1;
        else 
            flag_delay_a_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(xi_V_q0));
    icmp_ln1494_fu_240_p2 <= "1" when (signed(full_alpha) > signed(ap_const_lv17_6487)) else "0";
    icmp_ln1495_fu_252_p2 <= "1" when (signed(full_alpha) < signed(ap_const_lv17_19B79)) else "0";
    icmp_ln66_fu_324_p2 <= "1" when (ap_phi_mux_m_phi_fu_226_p4 = ap_const_lv5_10) else "0";
    m_cast_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_m_phi_fu_226_p4),64));
    myarctan_address0 <= m_cast_fu_336_p1(4 - 1 downto 0);

    myarctan_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            myarctan_ce0 <= ap_const_logic_1;
        else 
            myarctan_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1494_fu_288_p2 <= (icmp_ln1495_fu_252_p2 or icmp_ln1494_fu_240_p2);
    r_1_fu_362_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_p_load6),to_integer(unsigned('0' & zext_ln1333_fu_345_p1(16-1 downto 0)))));
    r_fu_349_p2 <= std_logic_vector(shift_right(signed(ap_sig_allocacmp_p_load9),to_integer(unsigned('0' & zext_ln1333_fu_345_p1(16-1 downto 0)))));
    select_ln1494_1_fu_280_p3 <= 
        ap_const_lv2_2 when (icmp_ln1494_fu_240_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln24_fu_264_p3 <= 
        alpha_V_4_fu_258_p2 when (icmp_ln1495_fu_252_p2(0) = '1') else 
        full_alpha;
    sin_out <= yi_V_q0;

    sin_out_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sin_out_ap_vld <= ap_const_logic_1;
        else 
            sin_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln703_2_fu_383_p2 <= std_logic_vector(unsigned(p_load6_reg_489) - unsigned(r_reg_495));
    sub_ln703_3_fu_393_p2 <= std_logic_vector(unsigned(alpha_V_3_fu_76) - unsigned(zext_ln68_fu_379_p1));
    sub_ln703_4_fu_419_p2 <= std_logic_vector(unsigned(p_load9_reg_483) - unsigned(r_1_reg_506));
    tmp_fu_371_p3 <= alpha_V_3_fu_76(16 downto 16);
    trunc_ln1333_fu_341_p1 <= ap_phi_mux_m_phi_fu_226_p4(4 - 1 downto 0);

    xi_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, xi_V_addr_2_reg_501, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_fu_371_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            xi_V_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0)))) then 
            xi_V_address0 <= xi_V_addr_2_reg_501;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            xi_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            xi_V_address0 <= "XXXX";
        end if; 
    end process;


    xi_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, tmp_fu_371_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0)))) then 
            xi_V_ce0 <= ap_const_logic_1;
        else 
            xi_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xi_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_fu_371_p3, sub_ln703_2_fu_383_p2, add_ln703_1_fu_414_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1))) then 
            xi_V_d0 <= add_ln703_1_fu_414_p2;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0))) then 
            xi_V_d0 <= sub_ln703_2_fu_383_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            xi_V_d0 <= ap_const_lv16_26DD;
        else 
            xi_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xi_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, tmp_fu_371_p3)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0)))) then 
            xi_V_we0 <= ap_const_logic_1;
        else 
            xi_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    yi_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, yi_V_addr_2_reg_512, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_fu_371_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            yi_V_address0 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0)))) then 
            yi_V_address0 <= yi_V_addr_2_reg_512;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            yi_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            yi_V_address0 <= "XXXX";
        end if; 
    end process;


    yi_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state4, ap_enable_reg_pp0_iter1, tmp_fu_371_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0)))) then 
            yi_V_ce0 <= ap_const_logic_1;
        else 
            yi_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    yi_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_fu_371_p3, add_ln703_fu_388_p2, sub_ln703_4_fu_419_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1))) then 
            yi_V_d0 <= sub_ln703_4_fu_419_p2;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0))) then 
            yi_V_d0 <= add_ln703_fu_388_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            yi_V_d0 <= ap_const_lv16_0;
        else 
            yi_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    yi_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, tmp_fu_371_p3)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_371_p3 = ap_const_lv1_0)))) then 
            yi_V_we0 <= ap_const_logic_1;
        else 
            yi_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1333_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1333_fu_341_p1),16));
    zext_ln68_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(myarctan_q0),17));
    zext_ln70_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_318_p2),64));
end behav;
