// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic_cordic,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.135988,HLS_SYN_LAT=19,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=222,HLS_SYN_LUT=645,HLS_VERSION=2020_2}" *)

module cordic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        full_alpha,
        sin_out,
        sin_out_ap_vld,
        cos_out,
        cos_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_state4 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] full_alpha;
output  [15:0] sin_out;
output   sin_out_ap_vld;
output  [15:0] cos_out;
output   cos_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sin_out_ap_vld;
reg[15:0] cos_out;
reg cos_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] myarctan_address0;
reg    myarctan_ce0;
wire   [13:0] myarctan_q0;
reg   [4:0] m_reg_222;
wire   [1:0] flag_V_fu_294_p3;
reg   [1:0] flag_V_reg_469;
wire   [4:0] add_ln70_fu_318_p2;
reg   [4:0] add_ln70_reg_474;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln66_fu_324_p2;
reg   [0:0] icmp_ln66_reg_479;
reg   [15:0] p_load9_reg_483;
reg   [15:0] p_load6_reg_489;
wire   [15:0] r_fu_349_p2;
reg   [15:0] r_reg_495;
reg   [3:0] xi_V_addr_2_reg_501;
wire   [15:0] r_1_fu_362_p2;
reg   [15:0] r_1_reg_506;
reg   [3:0] yi_V_addr_2_reg_512;
wire    ap_CS_fsm_state4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] xi_V_address0;
reg    xi_V_ce0;
reg    xi_V_we0;
reg   [15:0] xi_V_d0;
wire   [15:0] xi_V_q0;
reg   [3:0] yi_V_address0;
reg    yi_V_ce0;
reg    yi_V_we0;
reg   [15:0] yi_V_d0;
wire   [15:0] yi_V_q0;
reg   [3:0] flag_delay_a_V_address0;
reg    flag_delay_a_V_ce0;
reg    flag_delay_a_V_we0;
reg   [1:0] flag_delay_a_V_d0;
wire   [1:0] flag_delay_a_V_q0;
reg   [4:0] ap_phi_mux_m_phi_fu_226_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln70_fu_355_p1;
wire   [63:0] m_cast_fu_336_p1;
reg   [16:0] alpha_V_3_fu_76;
wire   [16:0] sub_ln703_3_fu_393_p2;
wire   [0:0] tmp_fu_371_p3;
wire   [16:0] add_ln703_2_fu_424_p2;
wire   [16:0] alpha_V_5_fu_272_p3;
reg   [15:0] empty_fu_80;
wire   [15:0] add_ln703_fu_388_p2;
reg   [15:0] ap_sig_allocacmp_p_load9;
wire   [15:0] sub_ln703_4_fu_419_p2;
reg   [15:0] empty_6_fu_84;
wire   [15:0] sub_ln703_2_fu_383_p2;
reg   [15:0] ap_sig_allocacmp_p_load6;
wire   [15:0] add_ln703_1_fu_414_p2;
wire    ap_CS_fsm_state5;
wire   [15:0] grp_fu_233_p2;
wire   [0:0] icmp_ln1495_fu_252_p2;
wire   [16:0] alpha_V_4_fu_258_p2;
wire   [0:0] icmp_ln1494_fu_240_p2;
wire   [16:0] alpha_V_fu_246_p2;
wire   [16:0] select_ln24_fu_264_p3;
wire   [0:0] or_ln1494_fu_288_p2;
wire   [1:0] select_ln1494_1_fu_280_p3;
wire   [3:0] trunc_ln1333_fu_341_p1;
wire   [15:0] zext_ln1333_fu_345_p1;
wire   [16:0] zext_ln68_fu_379_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_142;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cordic_myarctan #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
myarctan_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(myarctan_address0),
    .ce0(myarctan_ce0),
    .q0(myarctan_q0)
);

cordic_xi_V #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
xi_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(xi_V_address0),
    .ce0(xi_V_ce0),
    .we0(xi_V_we0),
    .d0(xi_V_d0),
    .q0(xi_V_q0)
);

cordic_xi_V #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
yi_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(yi_V_address0),
    .ce0(yi_V_ce0),
    .we0(yi_V_we0),
    .d0(yi_V_d0),
    .q0(yi_V_q0)
);

cordic_flag_delay_a_V #(
    .DataWidth( 2 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
flag_delay_a_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(flag_delay_a_V_address0),
    .ce0(flag_delay_a_V_ce0),
    .we0(flag_delay_a_V_we0),
    .d0(flag_delay_a_V_d0),
    .q0(flag_delay_a_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        alpha_V_3_fu_76 <= alpha_V_5_fu_272_p3;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1))) begin
        alpha_V_3_fu_76 <= add_ln703_2_fu_424_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0))) begin
        alpha_V_3_fu_76 <= sub_ln703_3_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_6_fu_84 <= 16'd9949;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1))) begin
        empty_6_fu_84 <= add_ln703_1_fu_414_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0))) begin
        empty_6_fu_84 <= sub_ln703_2_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_fu_80 <= 16'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1))) begin
        empty_fu_80 <= sub_ln703_4_fu_419_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0))) begin
        empty_fu_80 <= add_ln703_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m_reg_222 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln66_reg_479 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_reg_222 <= add_ln70_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln70_reg_474 <= add_ln70_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        flag_V_reg_469 <= flag_V_fu_294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln66_reg_479 <= icmp_ln66_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_load6_reg_489 <= ap_sig_allocacmp_p_load6;
        p_load9_reg_483 <= ap_sig_allocacmp_p_load9;
        r_1_reg_506 <= r_1_fu_362_p2;
        r_reg_495 <= r_fu_349_p2;
        xi_V_addr_2_reg_501 <= zext_ln70_fu_355_p1;
        yi_V_addr_2_reg_512 <= zext_ln70_fu_355_p1;
    end
end

always @ (*) begin
    if ((icmp_ln66_fu_324_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln66_reg_479 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_m_phi_fu_226_p4 = add_ln70_reg_474;
    end else begin
        ap_phi_mux_m_phi_fu_226_p4 = m_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_142)) begin
        if ((tmp_fu_371_p3 == 1'd1)) begin
            ap_sig_allocacmp_p_load6 = add_ln703_1_fu_414_p2;
        end else if ((tmp_fu_371_p3 == 1'd0)) begin
            ap_sig_allocacmp_p_load6 = sub_ln703_2_fu_383_p2;
        end else begin
            ap_sig_allocacmp_p_load6 = empty_6_fu_84;
        end
    end else begin
        ap_sig_allocacmp_p_load6 = empty_6_fu_84;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_142)) begin
        if ((tmp_fu_371_p3 == 1'd1)) begin
            ap_sig_allocacmp_p_load9 = sub_ln703_4_fu_419_p2;
        end else if ((tmp_fu_371_p3 == 1'd0)) begin
            ap_sig_allocacmp_p_load9 = add_ln703_fu_388_p2;
        end else begin
            ap_sig_allocacmp_p_load9 = empty_fu_80;
        end
    end else begin
        ap_sig_allocacmp_p_load9 = empty_fu_80;
    end
end

always @ (*) begin
    if ((~(flag_delay_a_V_q0 == 2'd2) & ~(flag_delay_a_V_q0 == 2'd3) & (1'b1 == ap_CS_fsm_state5))) begin
        cos_out = xi_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state5) & (flag_delay_a_V_q0 == 2'd2)) | ((1'b1 == ap_CS_fsm_state5) & (flag_delay_a_V_q0 == 2'd3)))) begin
        cos_out = grp_fu_233_p2;
    end else begin
        cos_out = 'bx;
    end
end

always @ (*) begin
    if (((~(flag_delay_a_V_q0 == 2'd2) & ~(flag_delay_a_V_q0 == 2'd3) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state5) & (flag_delay_a_V_q0 == 2'd2)) | ((1'b1 == ap_CS_fsm_state5) & (flag_delay_a_V_q0 == 2'd3)))) begin
        cos_out_ap_vld = 1'b1;
    end else begin
        cos_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        flag_delay_a_V_address0 = 64'd15;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flag_delay_a_V_address0 = zext_ln70_fu_355_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        flag_delay_a_V_address0 = 64'd0;
    end else begin
        flag_delay_a_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        flag_delay_a_V_ce0 = 1'b1;
    end else begin
        flag_delay_a_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flag_delay_a_V_d0 = flag_V_reg_469;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        flag_delay_a_V_d0 = flag_V_fu_294_p3;
    end else begin
        flag_delay_a_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln66_fu_324_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        flag_delay_a_V_we0 = 1'b1;
    end else begin
        flag_delay_a_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        myarctan_ce0 = 1'b1;
    end else begin
        myarctan_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sin_out_ap_vld = 1'b1;
    end else begin
        sin_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xi_V_address0 = 64'd15;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0)))) begin
        xi_V_address0 = xi_V_addr_2_reg_501;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        xi_V_address0 = 64'd0;
    end else begin
        xi_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0)))) begin
        xi_V_ce0 = 1'b1;
    end else begin
        xi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1))) begin
        xi_V_d0 = add_ln703_1_fu_414_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0))) begin
        xi_V_d0 = sub_ln703_2_fu_383_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        xi_V_d0 = 16'd9949;
    end else begin
        xi_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0)))) begin
        xi_V_we0 = 1'b1;
    end else begin
        xi_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        yi_V_address0 = 64'd15;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0)))) begin
        yi_V_address0 = yi_V_addr_2_reg_512;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        yi_V_address0 = 64'd0;
    end else begin
        yi_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0)))) begin
        yi_V_ce0 = 1'b1;
    end else begin
        yi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1))) begin
        yi_V_d0 = sub_ln703_4_fu_419_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0))) begin
        yi_V_d0 = add_ln703_fu_388_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        yi_V_d0 = 16'd0;
    end else begin
        yi_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_371_p3 == 1'd0)))) begin
        yi_V_we0 = 1'b1;
    end else begin
        yi_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln66_fu_324_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln66_fu_324_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_1_fu_414_p2 = (r_reg_495 + p_load6_reg_489);

assign add_ln703_2_fu_424_p2 = (zext_ln68_fu_379_p1 + alpha_V_3_fu_76);

assign add_ln703_fu_388_p2 = (r_1_reg_506 + p_load9_reg_483);

assign add_ln70_fu_318_p2 = (ap_phi_mux_m_phi_fu_226_p4 + 5'd1);

assign alpha_V_4_fu_258_p2 = ($signed(17'd79601) - $signed(full_alpha));

assign alpha_V_5_fu_272_p3 = ((icmp_ln1494_fu_240_p2[0:0] == 1'b1) ? alpha_V_fu_246_p2 : select_ln24_fu_264_p3);

assign alpha_V_fu_246_p2 = (17'd51471 - full_alpha);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_142 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign flag_V_fu_294_p3 = ((or_ln1494_fu_288_p2[0:0] == 1'b1) ? select_ln1494_1_fu_280_p3 : 2'd0);

assign grp_fu_233_p2 = (16'd0 - xi_V_q0);

assign icmp_ln1494_fu_240_p2 = (($signed(full_alpha) > $signed(17'd25735)) ? 1'b1 : 1'b0);

assign icmp_ln1495_fu_252_p2 = (($signed(full_alpha) < $signed(17'd105337)) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_324_p2 = ((ap_phi_mux_m_phi_fu_226_p4 == 5'd16) ? 1'b1 : 1'b0);

assign m_cast_fu_336_p1 = ap_phi_mux_m_phi_fu_226_p4;

assign myarctan_address0 = m_cast_fu_336_p1;

assign or_ln1494_fu_288_p2 = (icmp_ln1495_fu_252_p2 | icmp_ln1494_fu_240_p2);

assign r_1_fu_362_p2 = $signed(ap_sig_allocacmp_p_load6) >>> zext_ln1333_fu_345_p1;

assign r_fu_349_p2 = $signed(ap_sig_allocacmp_p_load9) >>> zext_ln1333_fu_345_p1;

assign select_ln1494_1_fu_280_p3 = ((icmp_ln1494_fu_240_p2[0:0] == 1'b1) ? 2'd2 : 2'd3);

assign select_ln24_fu_264_p3 = ((icmp_ln1495_fu_252_p2[0:0] == 1'b1) ? alpha_V_4_fu_258_p2 : full_alpha);

assign sin_out = yi_V_q0;

assign sub_ln703_2_fu_383_p2 = (p_load6_reg_489 - r_reg_495);

assign sub_ln703_3_fu_393_p2 = (alpha_V_3_fu_76 - zext_ln68_fu_379_p1);

assign sub_ln703_4_fu_419_p2 = (p_load9_reg_483 - r_1_reg_506);

assign tmp_fu_371_p3 = alpha_V_3_fu_76[32'd16];

assign trunc_ln1333_fu_341_p1 = ap_phi_mux_m_phi_fu_226_p4[3:0];

assign zext_ln1333_fu_345_p1 = trunc_ln1333_fu_341_p1;

assign zext_ln68_fu_379_p1 = myarctan_q0;

assign zext_ln70_fu_355_p1 = add_ln70_fu_318_p2;

endmodule //cordic
